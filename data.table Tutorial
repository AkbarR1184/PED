#setup

install.packages("data.table") # install data.table library

library(data.table) #load the library

# Iris, introduced by Ronald Fisher in his 1936 paper The use of multiple 
#measurements in taxonomic problems, contains three plant species 
#(setosa, virginica, versicolor) and four features measured for each sample. 
#These quantify the morphologic variation of the iris 
#flower in its three species, all measurements given in centimeters.

irisDT <- as.data.table(iris) # build in	iris dataset:

#Filtering	rows &	selecting columns 
#syntax:	DT[i,	j,	by] general syntax
##subset rows

irisDT[Species	==	"setosa",	]

##select columns

irisDT[,	Petal.Width]
irisDT[,	.(Petal.Width)]

##subset rows &	select columns

irisDT[Species	==	"setosa",	Petal.Width]
irisDT[Species	==	"setosa",	.(Petal.Width)]

##subset rows

irisDT[Petal.Width %between%	c(1,	2)]

##select columns

irisDT[,	.(Species,	Sepal.Length)]


# Summarizing
## 1. Counts
## 2. Aggregating
## 3. Group	by

##Counts
###syntax:	DT[i,	j,	by]

##count

irisDT[Species	==	"setosa",	.N]

##Aggregating
###syntax:	DT[i,	j,	by]
####Simple	aggregation: 
irisDT[,	.(count =	.N,	average =	mean(Petal.Width))]

####Including filtering: 

irisDT[Petal.Width <	0.9,	.(count =	.N,	average =	mean(Petal.Width))]

##Group	by
###syntax:	DT[i,	j,	by]

irisDT[,	.N,	by =	Species]
irisDT[,	.(average =	mean(Petal.Width)),	by =	Species]
irisDT[Sepal.Length <	5.3,	.(average =	mean(Petal.Width)),	by =	Species]

##Group	by
###special	symbol:	.SD
###SD	=	Subset	of	Data
# - a	data.table by itself
# - holds data	of	current goup as	defined in	by
# - when no	by,	.SD	applies to whole data.table
# - allows for calculations on	multiple	columns

irisDT[,	lapply(.SD,	mean),	by =	Species]
irisDT[Sepal.Length <	5.3,	lapply(.SD,	mean),	by =	Species]

###special	symbol:	.SDcols

irisDT[,	lapply(.SD,	mean),	by =	Species,	.SDcols =	1:2]
irisDT[,	lapply(.SD,	mean),	by =	Species,	.SDcols =	grep("Length",	names(irisDT))]


#Updating,	adding &	deleting variables
##special	operator:	:=
# - updates	a	data.table in	place (by reference)
# - can be used to:
#   o update	existing column(s)
# o add new	column(s)
# o delete	column(s)

## special	operator:	:=
irisDT[,	Sepal.Length :=	Sepal.Length *	2]
irisDT[,	`:=`	(Sepal.Length =	Sepal.Length *	2,
               Petal.Width =	Petal.Width /	2)]


#Adding variables
##special	operator:	:=
##special	symbol:	.I
irisDT[,	rownumber :=	.I]
irisDT[,	Sepal.Area :=	Sepal.Length *	Sepal.Width]
irisDT[,	`:=`	(Sepal.Area =	Sepal.Length *	Sepal.Width,
               Petal.Area =	Petal.Length *	Petal.Width)]



#Adding variables	by group
##special	operator:	:=
irisDT[,	Total.Sepal.Area :=	sum(Sepal.Area),	by =	Species]
irisDT[,	`:=`	(Total.Sepal.Area =	sum(Sepal.Area),
               Total.Petal.Area =	sum(Petal.Area))
       ,	by =	Species]



#Deleting variables
##special	operator:	:=
irisDT[,	Sepal.Length :=	NULL]
irisDT[,	(1:4)	:=	NULL]
irisDT[,	grep("Length",	names(irisDT)) :=	NULL]

#Joining datasets
##- subset	rows
##DT[id ==	“01”,	]
##- select	columns
##DT[,	val1]
##- subset	rows &	select columns
##DT[id ==	“01”,	val1]

#Joining datasets
##Example data

irisDT <- copy(iris)
setDT(irisDT)
irisH <- data.table(Species	=	c("setosa","versicolor","virginica"),
                    Species.full =	c("Iris	setosa","Iris versicolor","Iris virginica"),
                    height =	1:3,
                    soil =	c("mud","rock","sand"))



#Joining datasets
##syntax:	DT[i,	on,	j,	by]
irisDT[irisH,	on	=	.(Species)]
irisDT[irisH,	on	=	"Species"]

#Joining &	chaining
##syntax:	DT[i,	on,	j,	by]
#irisDT[	… ][	… ][	… ]
irisDT[irisH,	on	=	.(Species),	Species.full :=	Species.full
][,	median(Sepal.Length),	by =	Species.full]


#Reshaping data
##From wide to long:	
irisMelted <- melt(irisDT,	id =	"Species")
# melt(data,	id.vars,	measure.vars,
#      variable.name =	"variable",
#      value.name =	"value",
#      na.rm =	FALSE,
#      variable.factor =	TRUE,
#      value.factor =	FALSE)
#See	also:	?melt


#Reshaping data
##From long	to wide:
#dcast(irisMelted,	)
# dcast(data,	formula,
#       fun.aggregate =	NULL,	sep	=	"_",	...,
#       margins =	NULL,	subset	=	NULL,
#       fill =	NULL,	drop	=	TRUE,
#       value.var =	guess(data))
#See	also:	?dcast
